#! /bin/bash

# Check and remove all previous symlinks/files and replace with new ones

usage() {
  echo "Usage: $0 [command] <file>"
  echo ""
  echo "         H|h|help             show help"
  echo "         A|apply              apply new rc/conf files"
  echo "         R|remove             remove all file"
  echo "         S|set-ssh            set ssh agent link"
  echo ""
}

remove_dots() {

  mydots=("${HOME}/.vim" \
          "${HOME}/.vimrc" \
          "${HOME}/.tmux.conf" \
          "${HOME}/.bashrc" \
          "${HOME}/.bashrc.d" \
          "${HOME}/.bash_profile" \
          "${HOME}/.dircolors-256" \
          "${HOME}/.profile" \
          "${HOME}/.inputrc" \
          "${HOME}/.gitconfig")

  echo "MSG: removing ${mydots[@]}"
  #rm "${mydots[@]}"
}

#NOTE that BASH_SOURCE variable seem to only existing in BASH version >= 3
origin=$(readlink -f $(dirname "${BASH_SOURCE[0]}"))
dotbak="dotfiles.bak/"

apply_confs() {

  mydots=("vim/vim" \
          "vim/vimrc" \
          "tmux/tmux.conf" \
          "bash/bashrc" \
          "bash/bashrc.d" \
          "bash/bash_profile" \
          "bash/dircolors-256" \
          "bash/profile" \
          "bash/inputrc" \
          "git/gitconfig")


  for item in ${mydots[@]};
  do

    actual=".$(basename ${item})"

    if [[ ! -L "${HOME}/${actual}" ]]
    then

      if [[ ! -d "${HOME}/${dotbak}" ]]
      then
        mkdir "${HOME}/${dotbak}"
      fi

      if [[ -f "${HOME}/${dotbak}" ]]
      then
        echo "ERROR: This shouldn't happend"
        exit 1
      fi

      echo "MESSAGE: Moving ${HOME}/${actual} ${HOME}/${dotbak}"
      mv "${HOME}/${actual}" "${HOME}/${dotbak}"

      echo "MESSAGE: Linking ${origin}/${item} ${HOME}/${actual}"
      ln -s "${origin}/${item}" "${HOME}/${actual}"

    else

      echo "MESSAGE: Overading existing symlink ${origin}/${item} ${HOME}/${actual}"
      #TODO I think this is a bug here, that creates a symlink in my dotfiles directory
      # nothing should be created inside dotfiles directory
      #ln -sf "${origin}/${item}" "${HOME}/${actual}"

    fi
  done
}

apply_htop_conf() {

  htop_dir=${HOME}/.config/htop

  if [[ ! -e ${htop_dir} ]]
  then
    mkdir ${htop_dir}
  fi

  ln -s ${origin}/htop/htoprc ${htop_dir}
}

set-ssh-agent() {
  if [[ ! -e "${HOME}/.ssh/ssh_auth_sock" ]]
  then

    if [[ ! -L "${HOME}/.ssh/ssh_auth_sock" ]]
    then

      if [[ ! -d "${HOME}/.ssh" ]]
      then
        mkdir ${HOME}/.ssh
      fi

      ln -s ${origin}/ssh/rc ${HOME}/.ssh/rc

    fi
  fi
}

case "$1" in
  (help|h|H)
    usage
    exit
    ;;
  (A|apply)
    apply_confs
    apply_htop_conf
    ;;
  (R|remove)
    remove_dots
    ;;
  (S|set-ssh)
    set-ssh-agent
    ;;
  *)
    usage
    exit
esac
