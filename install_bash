#! /bin/bash

# Check and remove all previous symlinks/files and replace with new ones

usage() {
  echo "Usage: $0 [command] <file>"
  echo ""
  echo "         H|h|help             show help"
  echo "         A|apply              apply new rc/conf files"
  echo "         S|set-ssh            set ssh agent link"
  echo ""
}

origin=`readlink -f $(dirname "${BASH_SOURCE[0]}")`
dotbak="dotfiles.bak/"

apply_confs() {

  mydots=("vim/vim" \
          "vim/vimrc" \
          "tmux/tmux.conf" \
          "bash/bashrc" \
          "bash/bashrc.d" \
          "bash/bash_profile" \
          "bash/profile" \
          "bash/inputrc" \
          "git/gitconfig")
  
  
  for item in ${mydots[@]};
  do

    actual=".$(basename $item)"

    if [[ ! -L "$HOME/$actual" ]]
    then

      if [[ ! -d "$HOME/$dotbak" ]]
      then
        mkdir $HOME/"$dotbak"
      fi

      if [[ -f "$HOME/$dotbak" ]]
      then
        echo "ERROR: This shouldn't happend"
        exit 1
      fi

      echo "MESSAGE: Moving $HOME/$actual $HOME/$dotbak"
      mv "$HOME/$actual" "$HOME/$dotbak"

      echo "MESSAGE: Linking $origin/$item $HOME/$actual"
      ln -s "$origin/$item" "$HOME/$actual"

    else

      echo "MESSAGE: Overading existing symlink $origin/$item $HOME/$actual"
      #TODO I think this is a bug here, that creates a symlink in my dotfiles directory
      # nothing should be created inside dotfiles directory
      #ln -sf "$origin/$item" "$HOME/$actual"

    fi
  done
}

set-ssh-agent() {
  if [[ ! -e "$HOME/.ssh/ssh_auth_sock" ]]
  then

    if [[ ! -L "$HOME/.ssh/ssh_auth_sock" ]]
    then

      if [[ ! -d "$HOME/.ssh" ]]
      then
        mkdir $HOME/.ssh
      fi

      ln -s $origin/ssh/rc $HOME/.ssh/rc

    fi
  fi
}

case "$1" in
  (help|h|H)
    usage
    exit
    ;;
  (A|apply)
    apply_confs
    ;;
  (S|set-ssh)
    set-ssh-agent
    ;;
  *)
    usage
    exit
esac
