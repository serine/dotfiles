"------------------------------
"
"  My VimRc
"  (>^.^<)
"
"------------------------------

filetype plugin indent on
syntax on

"------------------------------

"I need to excape <bs> from inside quotes
"let mapleader = '\<bs>'

nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
inoremap  jk <esc>

nnoremap <leader>" viW<esc>a"<esc>hBi"<esc>lel
nnoremap <leader>' viW<esc>a'<esc>hBi'<esc>lel
nnoremap <leader>` viW<esc>a`<esc>hBi`<esc>lel

setlocal tabstop=4
setlocal shiftwidth=4
setlocal expandtab
setlocal softtabstop=4
setlocal autoindent
setlocal smartindent

set backspace=indent,eol,start

" enable system clipboard suport
set clipboard=unnamed

set background=dark
"colorscheme molokai
colorscheme PaperColor-Dark
let bdsErrorAsKeyword = 1
"------------------------------
" Set file type
"------------------------------

autocmd BufNewFile *.py 0put =\"#!/usr/bin/env python3"|$

autocmd BufRead, BufNewFile *.md set filetype=markdown
"https://vim.fandom.com/wiki/Insert_current_date_or_time
autocmd BufNewFile *.md 0put =strftime(\"---\<nl>
                                       \author: serine\<nl>
                                       \timestamp: %Y.%m.%d_%T_%Z\<nl>
                                       \---\")

"------------------------------
" Enable to save manual folds
"------------------------------

autocmd BufWinLeave * if expand("%") != "" | mkview | endif
autocmd BufWinEnter * if expand("%") != "" | loadview | endif
"autocmd BufWinLeave * mkview
"autocmd BufWinEnter * silent loadview

"------------------------------
" File browser
"------------------------------
"let g:netrw_banner = 0 " banner turned off, can use I to turn it on/off
"let g:netrw_liststyle = 3 " list style use i to circle through different options
"let g:netrw_browse_split = 4 " vertical browser split
"let g:netrw_altv = 1
"let g:netrw_winsize = 25 " file manger window size
"augroup ProjectDrawer
"   autocmd!
"   autocmd VimEnter * :Vexplore
"augroup END
"------------------------------

"------------------------------
" Unbinds keys
"------------------------------

" didn't find it useful..
"inoremap <esc> <nop>

no <up> <Nop>
no <down> <Nop>
no <left> <Nop>
no <right> <Nop>
ino <up> <Nop>
ino <down> <Nop>
ino <left> <Nop>
ino <right> <Nop>

" nonrecursive mapping
" I had used this mapping before I learned that
" `;` repeats `f` command !
"nnoremap ; :

"------------------------------
" Auto completes brackets
"------------------------------

inoremap ( ()<Esc>:let leavechar=")"<CR>i
inoremap [ []<Esc>:let leavechar="]"<CR>i
inoremap { {}<Esc>:let leavechar="}"<CR>i

imap <leader>f <esc>:exec 'normal f' . leavechar<cr>a

"------------------------------
" Comfort settings
"------------------------------

"set encoding=utf-8
set number                                                              " set the numbers
set relativenumber                              " setting relative numbers
set t_Co=256                                    " enables colors support for teminal
set cursorline                                  " highlight current line
set wildmenu                                    " visual autocomplete for command menu
set showmatch                                   " highlight matching [{()}]
set incsearch                                   " search as characters are entered
"set textwidth=120
"set colorcolumn=120
set visualbell

"----------------------------------------------------------------------
" Fixing Vim's Background color erase for 256-color tmux and GNU screen
"----------------------------------------------------------------------

if &term =~ '256color'
  " disable Background Color Erase (BCE) so that color schemes
  " render properly when inside 256-color tmux and GNU screen.
  " see also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
endif

"-------------
" Functions
"-------------

function! ChangeTabStops(current, new)
    let &l:tabstop = a:current
    let &l:softtabstop = a:current
    let &l:shiftwidth = a:current
    set noexpandtab
    retab!
    let &l:tabstop = a:new
    let &l:softtabstop = a:new
    let &l:shiftwidth = a:new
    set expandtab
    retab
endfunction

" turn into command instead of function call
command! -nargs=* ChangeTabStops call ChangeTabStops(<f-args>)

function! <SID>MkClnFile()
"function! MkClnFile()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    %s/^\t\+$//e
    call cursor(l, c)
endfunction

autocmd BufWritePre * :call <SID>MkClnFile()
" remove white space and tabs
command! -nargs=0 MkClnFile call MkClnFile()
"bit of code to highlight tabs
"syntax match Tab /\t/
"hi Tab gui=underline guifg=blue ctermbg=blue

